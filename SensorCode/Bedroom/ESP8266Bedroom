#include <Wire.h>
#include <DHT.h>
#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <ESP8266HTTPClient.h>
#include <BH1750.h>
#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <SPI.h>

// --- Wi-Fi Setup ---
const char* ssid = "";         
const char* password = ""; 

// --- API Endpoint ---
const char* server = "https://averyizatt.com/frogtank/api/sensor"; 

// --- DHT11 Config ---
#define SENSOR_COUNT 2
const uint8_t dhtPins[SENSOR_COUNT] = {D8, D6};  
const char* sensorNames[SENSOR_COUNT] = {
  "White Tree Frog Terrarium",  // (fixed)
  "Bedroom"                     // (fixed)
};
DHT dhts[SENSOR_COUNT] = {
  DHT(dhtPins[0], DHT11),
  DHT(dhtPins[1], DHT11)
};

// --- BH1750 Lux Sensor ---
BH1750 lightMeter(0x23);  

// --- SPI TFT Display Pins ---
#define TFT_CS   D2  
#define TFT_DC   D1  
#define TFT_RST  D0  
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);

// --- Wi-Fi Reconnect Config ---
const unsigned long WIFI_TIMEOUT_MS = 10000;
const unsigned long WIFI_RECOVER_MS = 30000;
unsigned long wifiDisconnectedSince = 0;

bool postSuccess = false;  // Track post success

void setup() {
  delay(1000);
  Serial.begin(115200);
  delay(1000);

  Serial.println("[BOOT] Wemos D1 R1 Node Starting...");

  connectWiFi();

  // DHT Sensors
  for (int i = 0; i < SENSOR_COUNT; i++) {
    dhts[i].begin();
    Serial.printf("[INIT] DHT '%s' on D%d\n", sensorNames[i], dhtPins[i]);
  }

  // BH1750 Lux Sensor
  Wire.begin(D4, D3);  
  if (lightMeter.begin(BH1750::CONTINUOUS_HIGH_RES_MODE)) {
    Serial.println("[INIT] BH1750 initialized.");
  } else {
    Serial.println("[ERROR] BH1750 init failed!");
  }

  // TFT Display
  tft.initR(INITR_MINI160x80);   
  tft.setSPISpeed(16000000);     
  tft.setRotation(3);            
  tft.fillScreen(ST77XX_BLACK);  
  tft.setFont(NULL);              // Use built-in font
  tft.setTextSize(1);             // SMALL font
  tft.setTextColor(ST77XX_WHITE); 
  tft.invertDisplay(true);        // Fix inverted colors

  Serial.println("[INIT] TFT ready.");
}

void loop() {
  autoReconnectWiFi();

  float lux = lightMeter.readLightLevel();
  float temps[SENSOR_COUNT];
  float hums[SENSOR_COUNT];
  postSuccess = false; // Reset success flag every loop

  for (int i = 0; i < SENSOR_COUNT; i++) {
    float tempC = dhts[i].readTemperature();
    float hum = dhts[i].readHumidity();
    if (isnan(tempC) || isnan(hum)) {
      Serial.printf("[%s] DHT read failed\n", sensorNames[i]);
      continue;
    }

    temps[i] = tempC * 1.8 + 32;
    hums[i] = hum;

    String payload = "{\"sensor\":\"" + String(sensorNames[i]) +
                     "\",\"temp\":" + String(temps[i], 1) +
                     ",\"humidity\":" + String(hums[i], 1);

    if (i == 0) {  // Frog Tank sensor
      payload += ",\"lux\":" + String(lux, 1);
    }

    payload += "}";

    Serial.printf("[%s] POST: %s\n", sensorNames[i], payload.c_str());

    if (WiFi.status() == WL_CONNECTED) {
      std::unique_ptr<WiFiClientSecure> client(new WiFiClientSecure);
      client->setInsecure();
      HTTPClient http;
      http.begin(*client, server);
      http.addHeader("Content-Type", "application/json");
      int code = http.POST(payload);
      Serial.printf("[%s] HTTP %d\n", sensorNames[i], code);
      if (code == 200) {
        postSuccess = true;  // Mark success
      }
      http.end();
    } else {
      Serial.println("[WARN] Wi-Fi not connected, skipping POST.");
    }

    delay(250);
  }

  // --- Update Display ---
  tft.fillScreen(ST77XX_BLACK);  // Full black background
  
  
uint16_t titleColor, tempColor, humColor, luxColor, green;

if (lux > 10) {
  titleColor = ST77XX_WHITE;
  tempColor = ST77XX_BLUE;
  humColor = ST77XX_YELLOW;
  luxColor = 0x7D7C;
  green = ST77XX_GREEN;
;
} else {
  green = 
  titleColor = 0x4208;  
  tempColor = 0x4208;
  humColor = 0x4208;
  luxColor = 0x4208;

  }
  
  tft.setTextSize(1);             // SMALL clean text


  // Title
  tft.setCursor(30, 5);
  tft.setTextColor(titleColor);
  tft.println("Whites Frog Tank");

  // Frog Tank Data
  tft.setCursor(20, 15);
  tft.setTextColor(tempColor);
  tft.printf("Temp: %.1fF", temps[0]);

  tft.setCursor(20, 25);
  tft.setTextColor(humColor);
  tft.printf("Hum : %.1f%%", hums[0]);

  tft.setCursor(20, 35);
  tft.setTextColor(luxColor);
  tft.printf("Lux  : %.1f lx", lux);

  tft.setCursor(30, 45);
  tft.setTextColor(titleColor);
  tft.println("Bedroom");

  // Bedroom Data
  tft.setCursor(20, 55);
  tft.setTextColor(tempColor);
  tft.printf("Temp: %.1fF", temps[1]);

  tft.setCursor(20, 65);
  tft.setTextColor(humColor);
  tft.printf("Hum : %.1f%%", hums[1]);

  // HTTP POST Confirmation
  if (postSuccess) {
    tft.setCursor(90, 60);
    tft.setTextColor(green);
    tft.println("POSTED!");
  } else {
        tft.setCursor(90, 65);
    tft.setTextColor(tempColor);
    tft.println("FAILED!");
  }


  Serial.println("--- Loop Complete ---\n");
  delay(10000);  // 10 seconds between updates
}

void connectWiFi() {
  WiFi.begin(ssid, password);
  Serial.print("[WIFI] Connecting");
  unsigned long start = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - start < WIFI_TIMEOUT_MS) {
    delay(500);
    Serial.print(".");
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.printf("\n[WIFI] Connected: %s\n", WiFi.localIP().toString().c_str());
    wifiDisconnectedSince = 0;
  } else {
    Serial.println("\n[WIFI] Failed.");
    wifiDisconnectedSince = millis();
  }
}

void autoReconnectWiFi() {
  if (WiFi.status() != WL_CONNECTED) {
    if (wifiDisconnectedSince == 0) {
      wifiDisconnectedSince = millis();
    }
    if (millis() - wifiDisconnectedSince > WIFI_RECOVER_MS) {
      Serial.println("[WIFI] Rebooting due to lost connection...");
      ESP.restart();
    }
    connectWiFi();
  } else {
    wifiDisconnectedSince = 0;
  }
}
